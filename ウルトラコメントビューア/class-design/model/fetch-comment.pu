@startuml コメント取得クラス図


    class MainWindow{
      +  ClickConnectionButtonServer()
    }
    class LiveStatusModel{
        + isConnect
    }
    class CommentModel{
        + getCommentModel()
    }
    class CommentGenerator{
        - CommentModel
        + ConnectCommentServer  
        + DisconnetServer
    }

    class GeneratorWebSocketServer{
        + SendCommentAsync(CommnetViewModel model) : Task
        - SendMessageToClientAsync(string json)
    }

    class UserInfoWindowFactory{
        + UserInfoWindowFactory(CommentModel model) : Window
    }
    
    MainWindow --> CommentGenerator
    CommentGenerator *-down-> ConnectCommentServer
    ConnectSwitcher *--> CommentGenerator
    ConnectSwitcher --> LiveStatusModel
    abstract class ABLiveWebSocketClient{
        + ReadCommentFromServerAsync(string userId) : IAsyncEnumerable<CommentModel>
        + DisconnetServer() : Task
        # StartConnectServer() : Task<bool>
        # ReceiveResponse() : IAsyncEnumerable<string>      
    }

    class NicoNicoABLiveWebSocketClient{

    }
    class TwicasABLiveWebSocketClient{
        
    }

    class SqliteSupport{
        - CreateTable(): void
        + InsertData(tableModel model) : void
        + SelectTable(Primarykey key) : List<CommentModel>
    }

    class Logger{
        + PushData(CommentModel model) : void
        + SelectCommentLog() : List<CommentModel>
    }

    'Observer
    class DisconnectObserver{
        + CommmentGenerator generator;
        + notify() : void
    }
    CommentGenerator -left-> DisconnectObserver

    abstract class ConnectCommentServer   {
        + fetchCommentAsync(): IAsyncEnumerable<CommentModel>;
        {abstract} CheckCommentServerStatus() : Task<LiveStatus>
    }
    
    class DropLogic{
        + DoStartOpenBrowser(string comment) : void
        + OpenUserInfoWindow(CommentModel model) : void
    }

    interface LiveRestClient{
        + fun getWebSocketUrl(): string;
    }
    class NiconicoRestClient{
        
    }
    class ElmHttpClientUtil{
        + {static} getAsync(request:string): Response<String>;
        + {static} postAsync(request:string): Response<String>;
    }


    class NicoNicoHtmlParser{
        + GetSessionWebSocketUrl()
    }

    abstract class CommentConverter{
        + {abstract} CovertToCommentViewModel(string reponse) : CommentModels
    }

    class NicoNicoConverter{
        + ConvertToDataPropsJsonModel(string dataProps) : DataPropsJsonModel
    }
    
    class UserInfoModel{
        - userId : string;
        - userIcon : Uri
        - comment : string
    }
    class HtmlParser{
        + ParseAttribute(string html) : atteributeValue
    }
    
    class NicoNicoSessionConnector{
        + FetchCommentServerUrlAsync(string sesisonWebSocketUrl) : Task<string>
    }

    class NicoNicoSessionWebSocketClient{
        + ExtractWebSocketResponse()
    }

    'コメントジェネレーター
    CommentGenerator -> GeneratorWebSocketServer 


    'コネクトコメントサーバ'
    ConnectCommentServer *-left-|> CommentConverter
    ConnectCommentServer *--|> LiveRestClient
    ConnectCommentServer *-right-|> ABLiveWebSocketClient

    'クライアント
    NicoNicoABLiveWebSocketClient .up.> ABLiveWebSocketClient
    TwicasABLiveWebSocketClient .left.> ABLiveWebSocketClient
    'ユーザー情報モデル
    UserInfoStandardModel -right-|> UserInfoModel
    'レストクライアント
    NiconicoRestClient .right.|> LiveRestClient
    TwicasRestClient   .left.|>  LiveRestClient
    
    CommentGenerator -up-> Logger
    Logger -left-> SqliteSupport

    MainWindow -right-> DropLogic

    DropLogic -up-> UserInfoWindowFactory

    UserInfoWindowFactory - TwicasUserInfoWindow : Windowを生成する

    NiconicoRestClient -down-> ElmHttpClientUtil
    TwicasRestClient   -down->   ElmHttpClientUtil 

    NiconicoRestClient -left-> NicoNicoHtmlParser    
    NiconicoRestClient -down-> NicoNicoSessionConnector

    NicoNicoSessionConnector -down-> NicoNicoSessionWebSocketClient
    NicoNicoHtmlParser -down-> NicoNicoConverter

    TwicasConnectCommentServer -|> ConnectCommentServer

@enduml